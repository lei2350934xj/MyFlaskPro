from .model import *


# 一些常用的 业务逻辑

'''
	数据库原子操作
'''
def createTable():
	db.create_all()

def dropTable():	# 一般不要用这个方法
	db.drop_all()


def hasUser(name):
	if User.query.filter_by(username=name).first():
		return True
	else:
		return False


def addUser(request):
	# 验证 register页面表单中的username是否重复：
    # 重复给出提示 不重复插入数据库 设置cookie  提示注册成功 跳转进入index页	
	flag = User.query.filter_by(username=request.form['username'])
	# has = User.query.filter_by(username=request.form['username'])
	# print('has=%s'%has)
	# if has:
	# 	flag = True
	# 	print('has不为0,flag=%s'%flag)
	# else:
	# 	flag = False
	# 	print('has为0,flag=%s'%flag)
	name = request.form.get('username')
	if hasUser(name):
		# db.session.rollback()
		return False
	else:
		try:
			user = User(request.form['username'],request.form['password'])
			print('user=%s'%user)
			db.session.add(user)
			db.session.commit()
			return True
		except Exception as e:
			print(e)
			db.session.rollback()
		# 设置cookie
		# res = make_response('set cookie when you createDb')
		# print('111111')
		# res = Response('name')
		# print('222222')
		# res.set_cookie('username', request.form['username'])
		# res.set_cookie('login_success_flag', 'True')
		# res.set_cookie('max_age','600')

		# return res


'''
	表单匹配 验证输入信息与数据库数据是否一致
'''
def validateIdCard(username, password):
	pwdInDb = User.query.filter_by(username=username).first().password
	print('数据库中username=%s对应的密码是password=%s'%(username, pwdInDb))

	if password==pwdInDb:
		return True
	else:
		return False


if __name__ == '__main__':
	pass































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































